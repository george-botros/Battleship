<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">
<!--
  This configuration is based off of CIS121's style grader
  https://www.seas.upenn.edu/~cis121/current/resources/guides/style-checker-setup.html

  Modifications were made by William Goeller 20sp
-->
<module name="Checker">
    <property name="fileExtensions" value="java"/>
  
    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="LineLength">
      <property name="max" value="100"/>
      <property name="severity" value="warning"/>
    </module>

    <module name="FileTabCharacter">
      <message key="file.containsTab" value="Line contains tab character"/>
      <property name="severity" value="warning"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <!--<module name="RegexpSingleline">
       <property name="format" value="System.out.print"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="File contains print statement"/>
       <property name="severity" value="warning"/>
    </module>-->
    
    <module name="RegexpSingleline">
        <property name="format" value=" assertEquals\(true"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Should use assertTrue instead"/>
        <property name="severity" value="warning"/>
    </module>
    
    <module name="RegexpSingleline">
        <property name="format" value=" assertEquals\(false"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Should use assertFalse instead"/>
        <property name="severity" value="warning"/>
    </module>
    
    <module name="RegexpSingleline">
        <property name="format" value=" assertEquals\(null"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Should use assertNull instead"/>
        <property name="severity" value="warning"/>
    </module>

	<!-- detects assertTrue(var1==var2) -->
    <module name="RegexpSingleline">
       <property name="format" value="assertTrue([^,]+==[^,]+)"/>
       <property name="minimum" value="0"/>
       <property name="severity" value="warning"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Use assertEquals() instead"/>
    </module>

    <!--<module name="SuppressionFilter">
      <property name="file" value="${samedir}/suppressions.xml" />
    </module>-->

    <module name="TreeWalker">

        <module name="Indentation">
          <property name="forceStrictCondition" value="false"/>
          <property name="severity" value="warning"/>
        </module>

        <!-- camel case check -->
        <module name="AbbreviationAsWordInName">
          <property name="tokens" value="VARIABLE_DEF"/>
          <property name="allowedAbbreviationLength" value="2"/>
          <property name="severity" value="warning"/>
          <message key="abbreviation.as.word" value="invalid variable or class naming convention"/>
        </module>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
          <property name="severity" value="warning"/>
        </module>
        <module name="LocalVariableName">
          <property name="severity" value="warning"/>
        </module>
        <module name="MemberName">
          <property name="severity" value="warning"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="severity" value="warning"/>
        </module>
        <module name="MethodName">
          <property name="severity" value="warning"/>
          <message key="name.invalidPattern" value="invalid method naming convention"/>
        </module>
        <module name="ParameterName">
          <property name="severity" value="warning"/>
        </module>
        <module name="StaticVariableName">
          <property name="severity" value="warning"/>
        </module>
        <module name="TypeName">
          <property name="severity" value="warning"/>
        </module>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="RedundantImport">
          <property name="severity" value="warning"/>
        </module>
        <module name="UnusedImports">
            <property name="processJavadoc" value="false"/>
            <property name="severity" value="warning"/>
        </module>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="EmptyBlock">
          <property name="severity" value="warning"/>
        </module>
        <module name="LeftCurly">
          <property name="severity" value="warning"/>
        </module>
        <module name="RightCurly">
          <property name="severity" value="warning"/>
        </module>
        <module name="NeedBraces">
          <property name="severity" value="warning"/>
        </module>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement">
          <property name="severity" value="warning"/>
        </module>
        <module name="MissingSwitchDefault">
          <property name="severity" value="warning"/>
        </module>
        <module name="FallThrough">
          <property name="severity" value="warning"/>
          <message key="fall.through" value="Case missing a break statement"/>
          <message key="fall.through.last" value="Case missing a break statement"/>
        </module>
        <module name="SimplifyBooleanExpression">
          <property name="severity" value="warning"/>
        </module>
        <module name="SimplifyBooleanReturn">
          <property name="severity" value="warning"/>
        </module>
        <module name="OneStatementPerLine">
          <property name="severity" value="warning"/>
        </module>

        <!-- White space -->
        <module name="MethodParamPad">
          <property name="severity" value="warning"/>
        </module>
        <module name="ParenPad">
          <property name="severity" value="warning"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="severity" value="warning"/>
            <message key="ws.notFollowed" value="WhitespaceAround: ''{0}'' is not followed by whitespace."/>
            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>


        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="VisibilityModifier">
          <property name="severity" value="warning"/>
		  <property name="packageAllowed" value="true"/>
		  <property name="protectedAllowed" value="false"/>
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle">
          <property name="severity" value="warning"/>
        </module>
        <module name="TodoComment">
          <property name="severity" value="warning"/>
        </module>

    </module>

</module>